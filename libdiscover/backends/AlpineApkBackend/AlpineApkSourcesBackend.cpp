/***************************************************************************
 *   Copyright Â© 2020 Alexey Min <alexey.min@gmail.com>                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or         *
 *   modify it under the terms of the GNU General Public License as        *
 *   published by the Free Software Foundation; either version 2 of        *
 *   the License or (at your option) version 3 or any later version        *
 *   accepted by the membership of KDE e.V. (or its successor approved     *
 *   by the membership of KDE e.V.), which shall act as a proxy            *
 *   defined in Section 14 of version 3 of the license.                    *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 ***************************************************************************/

#include "AlpineApkSourcesBackend.h"
#include "alpineapk_backend_logging.h"  // generated by ECM

#include <QDebug>
#include <QAction>
#include <QVector>

// KF5
#include <KLocalizedString>

// libapk-qt
#include <QtApk.h>

AlpineApkSourcesBackend::AlpineApkSourcesBackend(AbstractResourcesBackend *parent)
    : AbstractSourcesBackend(parent)
    , m_sourcesModel(new QStandardItemModel(this))
    , m_refreshAction(new QAction(QIcon::fromTheme(QStringLiteral("view-refresh")),
                                  QStringLiteral("Refresh"), this))
{
    loadSources();
    QObject::connect(m_refreshAction, &QAction::triggered,
                     this, &AlpineApkSourcesBackend::loadSources);

    // can be used to track enabling/disabling repo source
    // QObject::connect(m_sourcesModel, &QStandardItemModel::itemChanged, this, [](QStandardItem* item) {
    //     qCDebug(LOG_ALPINEAPK) << "source backend: DummySource changed" << item << item->checkState();
    // });
}

QAbstractItemModel *AlpineApkSourcesBackend::sources()
{
    return m_sourcesModel;
}

bool AlpineApkSourcesBackend::addSource(const QString &id)
{
    return addSourceFull(id, QString(), true);
}

QStandardItem *AlpineApkSourcesBackend::sourceForId(const QString& id) const
{
    for (int i = 0, c = m_sourcesModel->rowCount(); i < c; ++i) {
        QStandardItem *it = m_sourcesModel->item(i, 0);
        if (it->text() == id) {
            return it;
        }
    }
    return nullptr;
}

bool AlpineApkSourcesBackend::addSourceFull(const QString &id, const QString &comment, bool enabled)
{
    if (id.isEmpty()) {
        return false;
    }

    qCDebug(LOG_ALPINEAPK) << "source backend: Adding source:" << id;

    QStandardItem *it = new QStandardItem(id);
    it->setData(id, AbstractSourcesBackend::IdRole);
    it->setData(comment, Qt::ToolTipRole);
    it->setCheckable(true);
    it->setCheckState(enabled ? Qt::Checked : Qt::Unchecked);
    // for now, disable editing sources
    it->setFlags(it->flags() & ~Qt::ItemIsEnabled);
    m_sourcesModel->appendRow(it);
    return true;
}

void AlpineApkSourcesBackend::loadSources()
{
    QVector<QtApk::Repository> repos = QtApk::Database::getRepositories();
    m_sourcesModel->clear();
    for (const QtApk::Repository &repo: repos) {
        addSourceFull(repo.url, repo.comment, repo.enabled);
    }
}

bool AlpineApkSourcesBackend::removeSource(const QString &id)
{
    const QStandardItem *it = sourceForId(id);
    if (!it) {
        qCWarning(LOG_ALPINEAPK) << "source backend: couldn't find " << id;
        return false;
    }
    return m_sourcesModel->removeRow(it->row());
}

QString AlpineApkSourcesBackend::idDescription()
{
    return i18nc("Adding repo", "Enter apk repository URL, for example: "
                     "http://dl-cdn.alpinelinux.org/alpine/edge/testing/");
}

QVariantList AlpineApkSourcesBackend::actions() const
{
    static const QVariantList s_actions {
        QVariant::fromValue<QObject *>(m_refreshAction),
    };
    return s_actions;
}

bool AlpineApkSourcesBackend::supportsAdding() const
{
    return false; // for now, disable editing sources
}

bool AlpineApkSourcesBackend::canMoveSources() const
{
    return false; // for now, disable editing sources
}

bool AlpineApkSourcesBackend::moveSource(const QString& sourceId, int delta)
{
    int row = sourceForId(sourceId)->row();
    QList<QStandardItem *> prevRow = m_sourcesModel->takeRow(row);
    if (prevRow.isEmpty()) {
        return false;
    }

    const int destRow = row + delta;
    m_sourcesModel->insertRow(destRow, prevRow);
    if (destRow == 0 || row == 0) {
        Q_EMIT firstSourceIdChanged();
    }
    if (destRow == (m_sourcesModel->rowCount() - 1)
            || row == (m_sourcesModel->rowCount() - 1)) {
        Q_EMIT lastSourceIdChanged();
    }
    return true;
}
